#!/usr/bin/env python3
# This file generates the DayGroup java class

DAYS = ("sunday", "monday", "tuesday","wednesday", "thursday","friday", "saturday")
SHORT_DAYS = ("Su", "M", "T", "W", "H", "F", "S")
FILE = "../app/src/main/java/com/mba/drc/medicalapp/DayGroup.java"

def generate_class_source():
	source = """package com.mba.drc.medicalapp;

	/* This class represents a collection of non-mutually exclusive days

	 this file was generated by a script */
	 
	class DayGroup{\n"""

	# Private field
	for day in DAYS:
		source += f"\tprivate boolean m{day.title()};\n"
	source += "\n"

	# Default constructor
	source += "\tDayGroup(){\n"
	for day in DAYS:
		source += f"\t\tm{day.title()} = false;\n"
	source += "\t}\n"

	# Construct from an integer (taken from database)
	source += "\tDayGroup(int dnum){\n"
	k = 0
	for day in DAYS:
		source += f"\t\tm{day.title()} = ((dnum>>{k}) & 0x01) != 0;\n"
		k += 1
	source += "\t}\n\n"

	# Getters
	for day in DAYS:
		source += f"\tboolean {day}(){{return m{day.title()};}}\n"
	source += "\n"

	# Setters
	for day in DAYS:
		source += f"\tvoid set{day.title()}(boolean s){{ m{day.title()}=s; }}\n"
		#source += f"\tvoid set{day.title()}(){{ m{day.title()}=true; }}\n"

	# Convert to integer (for database)
	source += "\tint toInt(){\n\t\tint rv = 0;\n"
	k = 0
	for day in DAYS:
		source += f"\t\trv |= (m{day.title()} ? (1<<{k}) : 0);\n"
		k += 1
	source += "\t\treturn rv;\n\t}\n"

	# Convert to string
	source += "\tpublic String toString(){\n\t\tString rv = \"\";\n"
	source += "\t\tif(toInt() == 0x7F) return \"Everyday\";\n"
	source += "\t\telse if(toInt() == 0x3E) return \"Weekdays\";\n"
	source += "\t\telse if(toInt() == 0x41) return \"Weekends\";\n"
	for i in range(len(DAYS)):
		source += f"\t\tif(m{DAYS[i].title()}) rv += \"{SHORT_DAYS[i]}\";\n"
	source += "\t\treturn rv;\n\t}\n"

	source+="}\n"
	return source

def print_class_source():
	print(generate_class_source())

def update_class_file():
	with open(FILE, "w") as class_file:
		class_file.write(generate_class_source())

if __name__ == "__main__":
	print_class_source()
	update_class_file()
	
